1. Projete o hardware necessário para o MSP430 controlar um motor DC de 12V e 4A. Utilize transistores bipolares de junção (TBJ) 
com Vbe = 0,7 V, beta = 100 e Vce(saturação) = 0,2 V. Além disso, considere que Vcc = 3 V para o MSP430, e que este não pode fornecer
mais do que 10 mA por porta digital.
Ic = beta*Ib
Rb = (Vcc - Vbe)/Ib
4 = 100Ib => Ib = 40mA - o máximo é 10mA por porta digital
Utilizando a solução Darlington pair:
Ic = Ib*beta²
Rb = (Vcc - 2Vbe)/Ib
Aplicando valores:
4 = Ib*(100)² => Ib = 0.4mA
Rb = (3 - 2*0.7)/0.0004 => Rb = 4000 ohm = 4 kohm

2. Projete o hardware necessário para o MSP430 controlar um motor DC de 10V e 1A. Utilize transistores bipolares de junção (TBJ) 
com Vbe = 0,7 V e beta = 120. Além disso, considere que Vcc = 3,5 V para o MSP430, e que este não pode fornecer mais do que 10 mA por 
porta digital.
Ic = beta*Ib
1 = 120*Ib => Ib = 8mA
Rb = (Vcc - Vbe)/Ib
Rb = (3.5 - 2*0.7)/0.008 => Rb = 262.5 ohm

3. Projete o hardware utilizado para controlar 6 LEDs utilizando charlieplexing. Apresente os pinos utilizados no MSP430 e os LEDs, 
nomeados L1-L6.
Por Charlieplexing, com N pinos controla-se N(N-1) leds
Para 6 leds, utiliza-se 3 pinos: P1.0, P1.1 e P1.2
Na saída de cada pino, usa-se um resistor de 270 ohm. E entre dois pinos coloca-se um diodo em ordem direta e um diodo em ordem reversa.
Para escolher o led a ser acesso observa-se o diodo associado.
E define-se um pino para a tensão, um para o terra e outro para a entrada digital.
#define CHPX1 BIT0
#define CHPX2 BIT1
#define CHPX3 BIT6
#define CHPXS (CHPX1 + CHPX2 + CHPX3) 
#define CHPX_CLR P1OUT &= CHPXS // zerar


4. Defina a função void main(void){} para controlar 6 LEDs de uma árvore de natal usando o hardware da questão anterior. 
Acenda os LEDs de forma que um ser humano veja todos acesos ao mesmo tempo.
Void charlie_on (char CHPX_ON 
              	 char CHPX_OUT)
P1OUT &= CHPXS
P1DIR &= CHPXS
P1DIR |= CHPX_OUT
P1OUT |= CHPX_ON
}

5. Defina a função void main(void){} para controlar 6 LEDs de uma árvore de natal usando o hardware da questão 3. 
Acenda os LEDs de forma que um ser humano veja os LEDs L1 e L2 acesos juntos por um tempo, depois os LEDs L3 e L4 juntos, 
e depois os LEDs L5 e L6 juntos.
#define CHPX1 BIT0
#define CHPX2 BIT1
#define CHPX3 BIT6
#define CHPXS (CHPX1 + CHPX2 + CHPX3) 
#define CHPX_CLR P1OUT &= CHPXS // zerar

Void charlie_on (char CHPX_ON 
              	 char CHPX_OUT)
P1OUT &= CHPXS
P1DIR &= CHPXS
P1DIR |= CHPX_OUT
P1OUT |= CHPX_ON
}

int main (void)
	WDTCTL = WDTPW + WDTHOLD;

Char ent1 ( CHPX1
	    CHPX2
	    CHPX2
	    CHPX3
	    CHPX1
	    CHPX3)

Char ent2 ( CHPX2
	    CHPX1
            CHPX3
	    CHPX2
            CHPX3
  	    CHPX1)

while(1){
for (i = 0; i<0xffff, i++){	{   
charlie(ent1[0], ent2[0]);
charlie(ent1[1], ent2[1]);
}   
for (i=0; i<0xffff; i++){
charlie(ent1[2], ent2[2]);
charlie(ent1[3], ent2[3]);
}
for (i=0; i<0xffff; i++){
charlie(ent1[4], ent2[4]);
charlie(ent1[5], ent2[5]);
}

}


6. Defina a função void EscreveDigito(volatile char dig); que escreve um dos dígitos 0x0-0xF em um único display de 7 segmentos 
via porta P1, baseado na figura abaixo. Considere que em outra parte do código os pinos P1.0-P1.6 já foram configurados para 
corresponderem aos LEDs A-G, e que estes LEDs possuem resistores externos para limitar a corrente.

        ---  ==> A
       |   |
 F <== |   | ==> B
       |   |
 	    ---  ==> G
       |   |
 E <== |   | ==> C
       |   |
 	    ---  ==> D

#define DISPA LED0
#define DISPB LED1
#define DISPC LED2
#define DISPD LED3
#define DISPE LED4
#define DISPF LED5
#define DISPG LED6
#define DISPS (DISPA + DISPB + DISPC + DISPD + DISPE + DISPF + DISPG)
#define DISPS_CLR P1OUT &= CHPXS

Void disp_on (char DISP_ON)
P1OUT &= CHPXS
P1DIR &= CHPXS
P1DIR |= DISP_ON
P1OUT |= DISP_ON
}

int main (void)
	WDTCTL = WDTPW + WDTHOLD;
	
char ent1 (DISPB, DISPC)
char ent2 (DISPA, DISPB, DISPD, DISPE, DISPG)
char ent3 (DISPA, DISPB, DISPC, DISPD, DISPG)	  	    
char ent4 (DISPB, DISPC, DISPF, DISPG)
char ent5 (DISPA, DISPC, DISPD, DISPF, DISPG)
char ent6 (DISPA, DISPC, DISPD, DISPE, DISPF, DISPG)
char ent7 (DISPA, DISPB, DISPC)	  	    
char ent8 (DISPA, DISPB, DISPC, DISPD, DISPE, DISPF, DISPG)
char ent9 (DISPA, DISPB, DISPC, DISPD, DISPF, DISPG)	   
char entA (DISPA, DISPB, DISPC, DISPE, DISPF, DISPG)
char entB (DISPA, DISPB, DISPC, DISPD, DISPE, DISPF, DISPG)
char entC (DISPA, DISPD, DISPE, DISPF)
char entD (DISPA, DISPB, DISPC, DISPD, DISPE, DISPF)
char entE (DISPA, DISPD, DISPE, DISPF, DISPG)
char entF (DISPA, DISPE, DISPF, DISPG)

while(1){
for (i = 0; i<0xffff, i++){
disp_on(ent1[]);
}
for (i = 0; i<0xffff, i++){
disp_on(ent2[]);
}
for (i = 0; i<0xffff, i++){
disp_on(ent3[]);
}
for (i = 0; i<0xffff, i++){
disp_on(ent4[]);
}
for (i = 0; i<0xffff, i++){
disp_on(ent5[]);
}
for (i = 0; i<0xffff, i++){
disp_on(ent6[]);
}
for (i = 0; i<0xffff, i++){
disp_on(ent7[]);
}
for (i = 0; i<0xffff, i++){
disp_on(ent8[]);
}
for (i = 0; i<0xffff, i++){
disp_on(ent9[]);
}
for (i = 0; i<0xffff, i++){
disp_on(entA[]);
}
for (i = 0; i<0xffff, i++){
disp_on(entB[]);
}
for (i = 0; i<0xffff, i++){
disp_on(entC[]);
}
for (i = 0; i<0xffff, i++){
disp_on(entD[]);
}
for (i = 0; i<0xffff, i++){
disp_on(entE[]);
}
for (i = 0; i<0xffff, i++){
disp_on(entF[]);
}


7. Multiplexe 2 displays de 7 segmentos para apresentar a seguinte sequência em loop:
	00 - 11 - 22 - 33 - 44 - 55 - 66 - 77 - 88 - 99 - AA - BB - CC - DD - EE - FF

Void disp_on (char DISP_ON)
P1OUT &= CHPXS
P1DIR &= CHPXS
P1DIR |= DISP_ON
P1OUT |= DISP_ON
}

int main (void)
	WDTCTL = WDTPW + WDTHOLD;
	
char ent0 (DISPA, DISPB, DISPC, DISPD, DISPE, DISPF)
	  (DISPB, DISPC)
	  (DISPA, DISPB, DISPD, DISPE, DISPG)
	  (DISPA, DISPB, DISPC, DISPD, DISPG)	  	    
          (DISPB, DISPC, DISPF, DISPG)
	  (DISPA, DISPC, DISPD, DISPF, DISPG)
	  (DISPA, DISPC, DISPD, DISPE, DISPF, DISPG)
	  (DISPA, DISPB, DISPC)	  	    
          (DISPA, DISPB, DISPC, DISPD, DISPE, DISPF, DISPG)
	  (DISPA, DISPB, DISPC, DISPD, DISPF, DISPG)	   
	  (DISPA, DISPB, DISPC, DISPE, DISPF, DISPG)
	  (DISPA, DISPB, DISPC, DISPD, DISPE, DISPF, DISPG)
	  (DISPA, DISPD, DISPE, DISPF)
	  (DISPA, DISPB, DISPC, DISPD, DISPE, DISPF)
	  (DISPA, DISPD, DISPE, DISPF, DISPG)
	  (DISPA, DISPE, DISPF, DISPG)


for (i=0; i<0xffff; i++){
	for(j=0; j<17 j++){
		for(k=0; k<7, k++){
		disp_on1(ent[j][k]);
		disp_on2(ent[j][k]);
		}}
}
